// Code generated by MockGen. DO NOT EDIT.
// Source: utils/version_service.go
//
// Generated by this command:
//
//	mockgen -source=utils/version_service.go -package mocks -destination=./mocks/version_service.go -self_package=. VersionService
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/koor-tech/koor-operator/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockVersionService is a mock of VersionService interface.
type MockVersionService struct {
	ctrl     *gomock.Controller
	recorder *MockVersionServiceMockRecorder
}

// MockVersionServiceMockRecorder is the mock recorder for MockVersionService.
type MockVersionServiceMockRecorder struct {
	mock *MockVersionService
}

// NewMockVersionService creates a new mock instance.
func NewMockVersionService(ctrl *gomock.Controller) *MockVersionService {
	mock := &MockVersionService{ctrl: ctrl}
	mock.recorder = &MockVersionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionService) EXPECT() *MockVersionServiceMockRecorder {
	return m.recorder
}

// LatestVersions mocks base method.
func (m *MockVersionService) LatestVersions(ctx context.Context, endpoint string, versions *v1alpha1.ProductVersions) (*v1alpha1.DetailedProductVersions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestVersions", ctx, endpoint, versions)
	ret0, _ := ret[0].(*v1alpha1.DetailedProductVersions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestVersions indicates an expected call of LatestVersions.
func (mr *MockVersionServiceMockRecorder) LatestVersions(ctx, endpoint, versions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestVersions", reflect.TypeOf((*MockVersionService)(nil).LatestVersions), ctx, endpoint, versions)
}
