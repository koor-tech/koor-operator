// Code generated by MockGen. DO NOT EDIT.
// Source: utils/version_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	utils "github.com/koor-tech/koor-operator/utils"
)

// MockVersionService is a mock of VersionService interface.
type MockVersionService struct {
	ctrl     *gomock.Controller
	recorder *MockVersionServiceMockRecorder
}

// MockVersionServiceMockRecorder is the mock recorder for MockVersionService.
type MockVersionServiceMockRecorder struct {
	mock *MockVersionService
}

// NewMockVersionService creates a new mock instance.
func NewMockVersionService(ctrl *gomock.Controller) *MockVersionService {
	mock := &MockVersionService{ctrl: ctrl}
	mock.recorder = &MockVersionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionService) EXPECT() *MockVersionServiceMockRecorder {
	return m.recorder
}

// LatestVersions mocks base method.
func (m *MockVersionService) LatestVersions(endpoint string, currentVersions utils.Versions) (utils.Versions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestVersions", endpoint, currentVersions)
	ret0, _ := ret[0].(utils.Versions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestVersions indicates an expected call of LatestVersions.
func (mr *MockVersionServiceMockRecorder) LatestVersions(endpoint, currentVersions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestVersions", reflect.TypeOf((*MockVersionService)(nil).LatestVersions), endpoint, currentVersions)
}
