// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/version_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVersionService is a mock of VersionService interface.
type MockVersionService struct {
	ctrl     *gomock.Controller
	recorder *MockVersionServiceMockRecorder
}

// MockVersionServiceMockRecorder is the mock recorder for MockVersionService.
type MockVersionServiceMockRecorder struct {
	mock *MockVersionService
}

// NewMockVersionService creates a new mock instance.
func NewMockVersionService(ctrl *gomock.Controller) *MockVersionService {
	mock := &MockVersionService{ctrl: ctrl}
	mock.recorder = &MockVersionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionService) EXPECT() *MockVersionServiceMockRecorder {
	return m.recorder
}

// LatestCephVersion mocks base method.
func (m *MockVersionService) LatestCephVersion(endpoint string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestCephVersion", endpoint)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestCephVersion indicates an expected call of LatestCephVersion.
func (mr *MockVersionServiceMockRecorder) LatestCephVersion(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestCephVersion", reflect.TypeOf((*MockVersionService)(nil).LatestCephVersion), endpoint)
}

// LatestRookVersion mocks base method.
func (m *MockVersionService) LatestRookVersion(endpoint string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestRookVersion", endpoint)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestRookVersion indicates an expected call of LatestRookVersion.
func (mr *MockVersionServiceMockRecorder) LatestRookVersion(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestRookVersion", reflect.TypeOf((*MockVersionService)(nil).LatestRookVersion), endpoint)
}
