// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/cron_registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cron "github.com/robfig/cron/v3"
)

// MockCronRunner is a mock of CronRunner interface.
type MockCronRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCronRunnerMockRecorder
}

// MockCronRunnerMockRecorder is the mock recorder for MockCronRunner.
type MockCronRunnerMockRecorder struct {
	mock *MockCronRunner
}

// NewMockCronRunner creates a new mock instance.
func NewMockCronRunner(ctrl *gomock.Controller) *MockCronRunner {
	mock := &MockCronRunner{ctrl: ctrl}
	mock.recorder = &MockCronRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronRunner) EXPECT() *MockCronRunnerMockRecorder {
	return m.recorder
}

// AddFunc mocks base method.
func (m *MockCronRunner) AddFunc(spec string, cmd func()) (cron.EntryID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFunc", spec, cmd)
	ret0, _ := ret[0].(cron.EntryID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFunc indicates an expected call of AddFunc.
func (mr *MockCronRunnerMockRecorder) AddFunc(spec, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFunc", reflect.TypeOf((*MockCronRunner)(nil).AddFunc), spec, cmd)
}

// Remove mocks base method.
func (m *MockCronRunner) Remove(id cron.EntryID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", id)
}

// Remove indicates an expected call of Remove.
func (mr *MockCronRunnerMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCronRunner)(nil).Remove), id)
}

// Start mocks base method.
func (m *MockCronRunner) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockCronRunnerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCronRunner)(nil).Start))
}
