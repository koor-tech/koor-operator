// Code generated by MockGen. DO NOT EDIT.
// Source: utils/cron_registry.go
//
// Generated by this command:
//
//	mockgen -source=utils/cron_registry.go -package mocks -destination=./mocks/cron_registry.go -self_package=. CronRegistry
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCronRegistry is a mock of CronRegistry interface.
type MockCronRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockCronRegistryMockRecorder
}

// MockCronRegistryMockRecorder is the mock recorder for MockCronRegistry.
type MockCronRegistryMockRecorder struct {
	mock *MockCronRegistry
}

// NewMockCronRegistry creates a new mock instance.
func NewMockCronRegistry(ctrl *gomock.Controller) *MockCronRegistry {
	mock := &MockCronRegistry{ctrl: ctrl}
	mock.recorder = &MockCronRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronRegistry) EXPECT() *MockCronRegistryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCronRegistry) Add(name, schedule string, cmd func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", name, schedule, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCronRegistryMockRecorder) Add(name, schedule, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCronRegistry)(nil).Add), name, schedule, cmd)
}

// Get mocks base method.
func (m *MockCronRegistry) Get(name string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCronRegistryMockRecorder) Get(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCronRegistry)(nil).Get), name)
}

// Remove mocks base method.
func (m *MockCronRegistry) Remove(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockCronRegistryMockRecorder) Remove(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCronRegistry)(nil).Remove), name)
}
